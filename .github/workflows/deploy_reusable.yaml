name: Deploy reusable workflow
on:
  workflow_call:
    inputs:
      package-name:
        required: true
        type: string
      app:
        required: true
        type: string
      registry:
        required: true
        type: string
      network-value:
        required: true
        type: string
      app-hostname:
        required: true
        type: string
      host:
        required: true
        type: string

jobs:
  build:
    runs-on:
      - self-hosted
      - Linux

    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.REGISTRY_JSON }}
      - name: Get tag name
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tag-name
      - name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - name: Extract branch name
        shell: bash
        run: |
            if [[ ${{ github.event_name }} == 'pull_request' ]]; then
                echo 'for pull request pipeline'
                USE=true
                OUTPUT=${GITHUB_HEAD_REF##*/}
            else
                if [[ ${{ github.ref }} == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
                    echo 'for default branch pipeline'
                    USE=false
                    OUTPUT='main'
                else
                    echo 'for feature branch pipeline'
                    USE=true
                    OUTPUT=${GITHUB_REF##*/}
                fi
            fi
            echo 'version_suffix' $USE
            echo 'branch:' $OUTPUT
            echo "version_suffix=$USE" >> $GITHUB_OUTPUT
            echo "branch=$OUTPUT" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Set docker tags
        id: docker-tags
        env:
          TAG_NAME: ${{ steps.tag-name.outputs.tag }}
          APP: ${{ inputs.app }}
          REGISTRY: ${{ inputs.registry }}
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          export GIT_BRANCH=${{env.GIT_BRANCH}}
          echo 'DOCKER_TAGS<<EOF' >> $GITHUB_ENV
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo "$REGISTRY/$APP:latest"
            echo "$REGISTRY/$APP:main-$SHORT_SHA"
            echo "cache_image=$REGISTRY/$APP:cache-latest" >> $GITHUB_OUTPUT
          elif [ "$TAG_NAME" != "" ]; then
            echo "$REGISTRY/$APP:$TAG_NAME"
          else
            echo "$REGISTRY/$APP:$GIT_BRANCH"
            echo "cache_image=$REGISTRY/$APP:cache-$GIT_BRANCH" >> $GITHUB_OUTPUT
            echo "$REGISTRY/$APP:branch-$GIT_BRANCH-$SHORT_SHA"
          fi >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo 'BUILD_ARG_NETWORK_ID=${{ inputs.network-value }}' >> $GITHUB_ENV
          else
            echo 'BUILD_ARG_NETWORK_ID=testnet' >> $GITHUB_ENV
          fi
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          build-args: |
            BUILD_ARG_NETWORK_ID=${{ env.BUILD_ARG_NETWORK_ID }}
            BUILD_ARG_DAPP=${{ inputs.package-name }}
          push: true
          tags: ${{ env.DOCKER_TAGS }}
          file: ./Dockerfile
#           cache-from: type=registry,ref=${{ steps.docker-tags.outputs.cache_image }}
#           cache-to: type=registry,ref=${{ steps.docker-tags.outputs.cache_image }},mode=max

  publish:
    needs:
      - build
    runs-on:
      - self-hosted
      - Linux
    environment:
      name: "${{ inputs.app }}.test"
      url: "https://${{ steps.deploy-host.outputs.result }}"
    steps:
      - uses: actions/checkout@v3
      - name: Login to GCR
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.REGISTRY_JSON }}
      - name: Get tag name
        uses: little-core-labs/get-git-tag@v3.0.1
        id: tag-name
      - name: Get short sha
        uses: benjlevesque/short-sha@v1.2
        id: short-sha
      - name: Extract branch name
        shell: bash
        run: |
            if [[ ${{ github.event_name }} == 'pull_request' ]]; then
                echo 'for pull request pipeline'
                USE=true
                OUTPUT=${GITHUB_HEAD_REF##*/}
            else
                if [[ ${{ github.ref }} == "refs/heads/${{ github.event.repository.default_branch }}" ]]; then
                    echo 'for default branch pipeline'
                    USE=false
                    OUTPUT='main'
                else
                    echo 'for feature branch pipeline'
                    USE=true
                    OUTPUT=${GITHUB_REF##*/}
                fi
            fi
            echo 'version_suffix' $USE
            echo 'branch:' $OUTPUT
            echo "version_suffix=$USE" >> $GITHUB_OUTPUT
            echo "branch=$OUTPUT" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: Get deploy url
        uses: actions/github-script@v6
        id: deploy-host
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        with:
          script: |
            const branch = process.env.GIT_BRANCH;

            if (branch === 'master' || branch === 'main')
              return `${{inputs.app}}.${{inputs.host}}`

            const match = branch.match(/\w+-\d+/);
            const name = match ? match[0].toLowerCase() : branch;
            const result = `${name}-${{inputs.app}}.${{inputs.host}}`
            console.log(result);
            return result;
          result-encoding: string
      - name: Set envs
        shell: bash
        env:
          TAG_NAME: ${{ steps.tag-name.outputs.tag }}
          APP: ${{ inputs.app }}
          SHORT_SHA: ${{ steps.short-sha.outputs.sha }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        run: |
          export TAG_NAME=${{env.TAG_NAME}}
          export APP=${{env.APP}}
          export SHORT_SHA=${{env.SHORT_SHA}}
          export GIT_BRANCH=${{env.GIT_BRANCH}}
          if [ "$GIT_BRANCH" == "master" ] || [ "$GIT_BRANCH" == "main" ]; then
            echo "##[set-output name=app_name;]$(echo $APP)"
            echo "##[set-output name=app_hostname;]$(echo ${{ inputs.app-hostname }})"
            echo "##[set-output name=app_tag;]$(echo main-$SHORT_SHA)"
          elif [ "$TAG_NAME" != "" ]; then
            echo "##[set-output name=app_tag;]$(echo main-$TAG_NAME)"
          else
            echo "##[set-output name=app_name;]$(echo $APP-branch-$GIT_BRANCH)"
            echo "##[set-output name=app_hostname;]$(echo ${{ steps.deploy-host.outputs.result }})"
            echo "##[set-output name=app_tag;]$(echo branch-$GIT_BRANCH-$SHORT_SHA)"
          fi
        id: set_env
      - name: copy file via ssh password
        uses: appleboy/scp-action@master
        with:
          host: ${{ inputs.host }}
          username: ${{ secrets.ROKETO_DEPLOYER_USER }}
          key: ${{ secrets.ROKETO_DEPLOYER_KEY }}
          port: 22
          source: ./packages/${{ inputs.package-name }}/docker-compose.yaml
          target: "~/tmp/"
      - name: deploy
        uses: fifsky/ssh-action@master
        env:
          APP: ${{ inputs.app }}
          APP_HOSTNAME: ${{ steps.set_env.outputs.app_hostname }}
          REGISTRY: ${{ inputs.registry }}
          APP_NAME: ${{ steps.set_env.outputs.app_name }}
          APP_TAG: ${{ steps.set_env.outputs.app_tag }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
        with:
          command: |
            export APP=${{env.APP}}
            export REGISTRY=${{env.REGISTRY}}
            export APP_HOSTNAME=${{env.APP_HOSTNAME}}
            export APP_NAME=${{env.APP_NAME}}
            export GIT_BRANCH=${{env.GIT_BRANCH}}
            export APP_TAG=${{env.APP_TAG}}
            mkdir -p ~/services/$APP_HOSTNAME/
            mv ~/tmp/packages/${{ inputs.package-name }}/docker-compose.yaml ~/services/$APP_HOSTNAME/docker-compose.yaml
            rm -rf ~/tmp/packages/${{ inputs.package-name }}/docker-compose.yaml
            cd ~/services/$APP_HOSTNAME
            if [ "${{ inputs.app }}" == "rocketo-bis-ui-testnet" ] || [ "${{ inputs.app }}" == "rocketo-bis-ui-prod" ]; then
              docker-compose down
            fi
            docker-compose up -d
            if [ "${{ inputs.app }}" == "rocketo-bis-ui-testnet" ] || [ "${{ inputs.app }}" == "rocketo-bis-ui-prod" ]; then
              docker-compose start frontbizui
            fi
            export state=$(docker-compose ps -q | tr -d '[:space:]' | xargs docker inspect -f '{{ .State.ExitCode }}' | grep -v 0 | wc -l | tr -d '[:space:]')
            if [ $state -eq "0" ]
              then
                export text='Branch '$GIT_BRANCH' was successfully deployed to '$APP_HOSTNAME
                . ~/services/sucess.sh
              else
                export text='@here Branch '$GIT_BRANCH' was stuck the deploy to '$APP_HOSTNAME' with error-code: '$state
                . ~/services/sucess.sh
                exit 5
              fi

          host: ${{ inputs.host }}
          user: ${{ secrets.ROKETO_DEPLOYER_USER }}
          key: ${{ secrets.ROKETO_DEPLOYER_KEY }}
          args: "-tt"

  success:
    needs:
      - build
      - publish

    runs-on:
      - self-hosted
      - Linux

    steps:
      - run: echo "Done"
